stages:
  - static-check
  - compile
  - build-wheels
  - test
  - docs
  - deploy

.update-git-config: &update-git-config
  - git config --global url."https://gitlab-ci-token:${CI_JOB_TOKEN}@gitlab.lrz.de/".insteadOf "git@gitlab.lrz.de:"
  - git config --global url."https://gitlab-ci-token:${CI_JOB_TOKEN}@gitlab.lrz.de".insteadOf "ssh://git@gitlab.lrz.de"

.install-rust: &install-rust
  - apt-get update && apt-get install -y git curl build-essential
  - curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- --default-toolchain=stable --profile=minimal -y
  - source "$HOME/.cargo/env"

default:
  image: $CI_REGISTRY/tum-cps/commonroad-docker/ci-base:2025.2
  before_script:
    - *update-git-config

variables:
  CXX_TEST_TARGET: "cr_knowledge_extraction_test"

.python-version-unprotected-branches: &python-version-unprotected-branches "3.10"

.python-versions: &python-versions
  - *python-version-unprotected-branches

pre_commit:
  stage: static-check
  image: python:3.10-slim-bullseye
  before_script:
    - apt-get update && apt-get install -y git
  script:
    - pip install pre-commit
    - pre-commit run --all-files --show-diff-on-failure


### build C++ library using CMake directly ###
.cache-build-dir:
  cache: &cache_dependency_archives
    key: cache-dependency-archives
    paths:
      - build/_deps/*-subbuild/*-populate-prefix/src/*.{tar*,zip}
    policy: pull

generate-cache:
  stage: compile
  cache:
    <<: *cache_dependency_archives
    policy: push
  script:
    - cmake -G "Ninja Multi-Config" -S . -B build -DFETCHCONTENT_QUIET:BOOL=OFF
  needs: [ ]

build-gcc:
  stage: compile
  cache:
    <<: *cache_dependency_archives
  variables:
    CC: gcc
    CXX: g++
  script:
    - cmake -G "Ninja Multi-Config" -S . -B build
    - cmake --build build --config Release
  needs: [ ]

build-test:
  stage: compile
  cache:
    <<: *cache_dependency_archives
  script:
    - cmake -G "Ninja Multi-Config" -S . -B build
    - cmake --build build --config RelWithDebInfo --target $CXX_TEST_TARGET
  needs: [ ]
  artifacts:
    paths:
      - build/RelWithDebInfo/$CXX_TEST_TARGET
      - build/**/*.so
      - build/**/*.so.*
    expire_in: 30 minutes

### build wheels ###
build-sdist:
  stage: build-wheels
  image: $CI_REGISTRY/tum-cps/commonroad-docker/wheelenv:2025.2
  script:
    - python3 --version
    - python3 -m build --sdist
  needs: [ ]
  artifacts:
    paths:
      - dist/*.tar.gz
    expire_in: 30 minutes

.common-rules:
  rules:
    # Rule to disable a job for merge request pipelines (imitate default job behaviour)
    - &skip_merge_request_pipeline
      if: $CI_PIPELINE_SOURCE == "merge_request_event"
      when: never
    - &skip_scheduled_pipeline
      if: $CI_PIPELINE_SOURCE == "schedule"
      when: never
    - if: &full_wheel_build_condition $CI_COMMIT_TAG || $CI_COMMIT_REF_PROTECTED == "true" || $CI_COMMIT_REF_NAME == $CI_DEFAULT_BRANCH || $CI_COMMIT_REF_NAME =~ /^(main|development)$/

build-wheel:
  stage: build-wheels
  image: quay.io/pypa/manylinux2014_x86_64:2025.01.05-1
  variables:
    # pretend to CMake that we are using cibuildwheel to build the wheel
    CIBUILDWHEEL: "1"
    PYTHON_VERSION: *python-version-unprotected-branches
  script:
    - *install-rust
    - python$PYTHON_VERSION -m pip wheel -v -w built_wheel dist/*.tar.gz
    - auditwheel repair -w wheelhouse built_wheel/cr_rule_simplification-*.whl
  needs:
    - job: build-sdist
      artifacts: true
  artifacts:
    paths:
      - wheelhouse/*.whl
    expire_in: 30 minutes

build-wheel-cibw:
  stage: build-wheels
  # Use the privileged runner as required for Docker-in-Docker (dind)
  tags:
    - dind
  image: $CI_REGISTRY/tum-cps/commonroad-docker/wheelenv:2025.2
  # make a docker daemon available for cibuildwheel to use
  services:
    - name: docker:20.10-dind
      entrypoint: [ "env", "-u", "DOCKER_HOST" ]
      command: [ "dockerd-entrypoint.sh" ]
  variables:
    DOCKER_HOST: tcp://docker:2375/
    DOCKER_DRIVER: overlay2
    # See https://github.com/docker-library/docker/pull/166
    DOCKER_TLS_CERTDIR: ""
    CIBW_BEFORE_ALL: "git config --global url.\"https://gitlab-ci-token:${CI_JOB_TOKEN}@gitlab.lrz.de//\".insteadOf \"git@gitlab.lrz.de:\" && git config --global url.\"https://gitlab-ci-token:${CI_JOB_TOKEN}@gitlab.lrz.de/\".insteadOf \"ssh://git@gitlab.lrz.de\""
    # NOTE: The following variables correspond to the default values.
    # They are specified here so that it is possible to override them using
    # Gitlab push options or in the UI when running a manual pipeline.
    #
    # For example, use git push -o ci.variable="CIBW_BUILD_VERBOSITY=1"
    # to make cibuildwheel verbose in the pipeline created for the pushed commit.
    CIBW_BUILD_VERBOSITY: 1
    # We only use the artifacts (sdist/wheels) from previous jobs, so skip all Git operations
    GIT_STRATEGY: none
  script:
    - pipx run 'cibuildwheel == 2.*' dist/*.tar.gz
  needs:
    - job: build-sdist
      artifacts: true
  artifacts:
    paths:
      - wheelhouse/*.whl
    expire_in: 30 minutes
  rules:
    # We only run the docker-in-docker job on protected branches
    - if: $CI_COMMIT_REF_PROTECTED == "false"
      when: never
    - *skip_merge_request_pipeline
    # When we are building wheels for a tag/release, build wheel for all supported Python versions and platform
    # Also routinely build all wheels for the default branch as well as develop (commits on these branches are infrequent)
    - if: *full_wheel_build_condition
      variables:
        CIBW_BUILD: "*"
    # Fallback rule when we're not building wheels for a tag or a main branch:
    # In that case, build only manylinux wheels to speed up the pipeline
    - when: on_success
      variables:
        CIBW_BUILD: "*-manylinux_x86_64"

### tests ###
run-gtest:
  stage: test
  script:
    - cd build
    - RelWithDebInfo/$CXX_TEST_TARGET
  needs:
    - job: build-test
      artifacts: true

run-examples:
  stage: test
  image: python:3.10-slim-bullseye
  before_script:
    # we need build-essential, since Polygon3 (dependency of the drivability checker) has to be compiled from source
    # libgl1 and libglib2.0-0 are required for the native cv2 package
    - apt-get update && apt-get install -y --no-install-recommends git build-essential libgl1 libglib2.0-0
    - *update-git-config
    - *install-rust
    - pip install -v .[test] # rebuild wheel from scratch to make sure that compiler versions match
  script:
    - python main.py
  needs: [ ]

### documentation ###
build-docs:
  stage: docs
  image: python:${JOB_PYTHON_VERSION}-slim-bullseye
  variables:
    JOB_PYTHON_VERSION: *python-version-unprotected-branches
  needs:
    - job: build-wheel
      artifacts: true
  before_script:
    - apt-get update && apt-get install -y git doxygen
    - *install-rust
    - *update-git-config
    - pip install pip-tools
    - pip-compile --extra=docs -o requirements_docs.txt pyproject.toml
    - pip install -r requirements_docs.txt
    - pip install --no-index --find-links=wheelhouse/ --no-deps cr_rule_simplification[docs]
  script:
    - mkdocs build
  artifacts:
    paths:
      - site
    expire_in: 30 minutes

### deploy wheels ###
upload-wheel-internal:
  stage: deploy
  image: $CI_REGISTRY/tum-cps/commonroad-docker/wheelenv:2025.2
  variables:
    TWINE_USERNAME: gitlab-ci-token
    TWINE_PASSWORD: ${CI_JOB_TOKEN}
    TWINE_REPOSITORY_URL: ${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/packages/pypi
    # We only use the artifacts (sdist/wheels) from previous jobs, so skip all Git operations
    GIT_STRATEGY: none
  script:
    - twine upload dist/*.tar.gz wheelhouse/*.whl
  needs:
    - job: build-sdist
      artifacts: true
    - job: build-wheel-cibw
      artifacts: true
  rules:
    # Disable job for merge request pipelines (imitate default job behaviour)
    - *skip_merge_request_pipeline
    - *skip_scheduled_pipeline
    - if: $CI_COMMIT_BRANCH == "development"
      when: manual

### deploy documentation ###
pages:
  stage: deploy
  variables:
    GIT_STRATEGY: none
  script:
    - mv site public
  needs:
    - job: build-docs
      artifacts: true
  artifacts:
    paths:
      - public
    expire_in: 30 minutes
  environment:
    name: Gitlab Pages
    url: https://cps.pages.gitlab.lrz.de/commonroad/commonroad-rule-simplification/
  rules:
    - *skip_merge_request_pipeline
    - *skip_scheduled_pipeline
    - if: $CI_COMMIT_BRANCH == "main"
      when: manual
